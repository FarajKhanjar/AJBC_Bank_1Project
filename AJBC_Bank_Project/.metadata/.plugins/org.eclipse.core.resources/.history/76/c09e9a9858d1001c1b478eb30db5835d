package AccountOwner;

import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * In This class we create an account of bank that base on many values.
 * @author Faraj
 *
 */
public class Account 
{	
	//Fields:
	protected double balance;
	protected AccountProperties accountProperties;
	protected ActivityData[] activityDataArray;	
	private double intrestRate; //TODO add it to class diagram.
	private double operationFee; //TODO add it to class diagram.
	private int index=0;
	private final int MAXIMUM_TRANSFER_CASH = 2000;
	private final int MAX_BILL_AMOUNT = 5000;
	private int counter = 1;
	protected LocalDateTime releaseTime;
	protected final int ID;
	protected int numActivities;
	protected double debt;
	private Loan loan;
	private static final int ACTIVITY_LOG_SIZE = 100;
	private int activityLogIndex;

	/**
	 * Contractor:
	 * @param balance of the account.
	 * @param accountProperties = The account type (Bronze or Silver or Gold or Titanium)
	 * @param intrestRate = a value who belongs to any bank account and based on his type.
	 * @param operationFee = = a value who belongs to any bank account and based on his type.
	 */
	public Account(double balance, AccountProperties accountProperties, double intrestRate, double operationFee) 
	{
		this.accountProperties = accountProperties;
		activityDataArray = new ActivityData[ACTIVITY_LOG_SIZE];
		this.intrestRate = intrestRate;
		this.operationFee = operationFee;
		setBalance(balance); 
		this.ID = counter++;
		activityLogIndex = 0;
		loan = null;
	}
	
	public LocalDateTime getReleaseTime() 
	{
		return releaseTime;
	}
	
	public void setReleaseTime(LocalDateTime releaseTime) 
	{
		this.releaseTime = releaseTime;
	}
	
	public void addActivityLog(ActivityData activityData) 
	{	
		if (activityLogIndex >= ACTIVITY_LOG_SIZE) {
			System.out.println("Activity log full, can't add logs");
			return;
		}	
		activityDataArray[activityLogIndex] = activityData;
		activityLogIndex ++;
	}
	
	/**
	 * Get and Set method help us to get values of the fields or set a new values.
	 *
	 */	
	private void setBalance(double balance) 
	{
		this.balance = balance;
	}

	public double getBalance()
	{
		return balance;
	}
	
	/**
	 *  user clicks on the make a deposit button and by using an authentication 4 digits code,
	 *  he will deposit cash.
	 * @param cashAmount: its the value of money that the user want to deposit.
	 */
	public void deposit(int cashAmount) 
	{
		setBalance(balance + cashAmount);
		activityOfData(ActivityName.DEPOSIT, "none",cashAmount);
	}
	
	/**
	 * In this method we will create one activity data of one account
	 * @param activityName: MAKE_PAYMENT_TRANSFER, PAY_BILL, DEPOSIT, WITHDRAWAL, GET_LOAN, FEE_COLLECTION;
	 * @param info: get info using LocalDateTime.
	 * @param balanceChange: change in balance.
	 */
	private void activityOfData(ActivityName activityName, String info,double balanceChange) 
	{
		ActivityData activityData = new ActivityData(activityName, LocalDateTime.now() ,info ,balanceChange);
		activityDataArray(activityData);
	}
	
	/**
	 * After create one activity we intrested to push in a array of data activity.
	 * @param activityData - in the same length of the number of users.
	 */
	private void activityDataArray(ActivityData activityData) 
	{
		if (activityDataArray.length <= index) 
		{
			System.out.println("Its the maximum array right now.");
			return;
		}
		activityDataArray[index++] = activityData;
	}
	
	/**
	 * In this method will check if to user able to get a cash by Withdrawal.
	 * @param cashAmount: its the value of money that the user want to Withdrawal.
	 * @return True or False and print a message.
	 */
	public boolean checkWithdrawalSelect(int cashAmount) 
	{
		boolean flag=true; //default value
		System.out.println(accountProperties.maxWithdrawal);
		System.out.println(accountProperties);
		if (accountProperties.maxWithdrawal >= cashAmount) 
		{
			setBalance(balance - cashAmount);
			activityOfData(ActivityName.WITHDRAWAL, "none", (cashAmount*(-1)));			
		} 
		else 
		{
			System.out.println("Sorry! Its the maximum daily amount.");
			flag=false;
		}
		return flag;
	}
	
	/**
	 * In this method will check if to user able to transfer a cash to another account
	 * @param cashAmount: its the value of money that the user want to Withdrawal.
	 * the balance of the account of course change if its True.
	 * @return True or False and print a message.
	 */
	public boolean transferToAnotherAccount(int cashAmount) 
	{
		if (cashAmount <= MAXIMUM_TRANSFER_CASH) 
		{
			setBalance(balance - cashAmount);
			activityOfData(ActivityName.MAKE_PAYMENT_TRANSFER, "transfer to the second user", (cashAmount*(-1)));
			return true;
		} else 
		{
			System.out.printf("Sorry! Its the maximum daily amount for transfer, ("+ MAXIMUM_TRANSFER_CASH+").");
			return false;
		}
	}
	
	/**
	 * This method show us the case that there is a account that transfer money for me
	 * @param cashAmount: its the value of money that the user want to transfer to me.
	 * the balance of the account of course change if its True.
	 */
	public void accountTransferredForMe(int cashAmount) 
	{
		setBalance(balance + cashAmount);
		activityOfData(ActivityName.MAKE_PAYMENT_TRANSFER, "transferred to me from other user", cashAmount);
	}
	
	/**
	 * In this method will check if to user able to pay a Bill.
	 * @param cashAmount: its the value of money that the user want to Withdrawal.
	 * the balance of the account of course change if its True.
	 * @param payeeType its the kind of the bill that the user want to pay:
	 * It can be The_AJBC_BANK, PHONE, WATER, ELECTRIC Company
	 * @return True or False and print a message.
	 */
	public boolean payBill(int cashAmount, String payeeType) 
	{
		if (MAX_BILL_AMOUNT>=cashAmount) 
		{
			setBalance(balance - cashAmount);
			activityOfData(ActivityName.PAY_BILL, "Payee a bill of: " + payeeType, (cashAmount*(-1)));
			return true;
		} 
		else 
		{
			System.out.printf("Sorry! Its the maximum daily amount to pay a bill, ("+MAX_BILL_AMOUNT+").");
			return false;
		}
	}
	
	/**
	 * In this method will check if to user able to get a loan
	 * @param cashAmount: its the value of money that the user want to get a loan of.
	 * the balance of the account of course change if its True.
	 * @return True or False and print a message.
	 */
	public boolean checkLoanAmount(int cashAmount) 
	{
		return cashAmount <= accountProperties.maxLoan;
	}
	
	/**
	 * If the user able to get a loan, in this method we will set the new balance and print a massage,
	 * In case the number of payments exceeds sixty, the user is prompt with a message and the operation terminates.
	 * @param cashAmount: its the value of money that the user want to get a loan of.
	 * @param paymentsNumber: 
	 */
	public void getLoanAmount(int cashAmount, int paymentsNumber) 
	{
		setBalance(balance + cashAmount);
		activityOfData(ActivityName.GET_LOAN, "num of the payments is: " + paymentsNumber, cashAmount);
	}
	
	public int getID() 
	{
		return ID;
	}
	
	/**
	 * In this method we interested to get the history of the actions in the account by a start date.
	 * @param timeStamp
	 * @return
	 */
	public ActivityData[] getHistoryFromGivenDate(LocalDateTime timeStamp) 
	{
		return new ActivityData[0];
	}

	
	public void showActivites(LocalDate start)
	{
		for (int i=0; i<numActivities; i++)
		{
			ActivityData current = activityDataArray[i];
			LocalDate timeStamp = current.timeStamp.toLocalDate();
			if (timeStamp.isAfter(start) || timeStamp.isEqual(start))
				System.out.println(current);
		}
		System.out.println("Current debt is: "+operationFee);
	}
	
	public Loan getLoan() 
	{
		return this.loan;
	}
	
	public void printActivityLog() 
	{
		if (activityLogIndex <= 0) 
		{
			System.out.println("No activity log found");
			return;
		}
		
		System.out.println(activityLogIndex + " activities in log:");
		for (int i=0; i<activityLogIndex; i++)
			System.out.println(activityDataArray[i]);
	}
	
	public void printLoan() 
	{
		if (loan == null) return;
		System.out.println(loan);
	}
	
	public AccountProperties getAccountProperties() 
	{
		return accountProperties;
	}
}