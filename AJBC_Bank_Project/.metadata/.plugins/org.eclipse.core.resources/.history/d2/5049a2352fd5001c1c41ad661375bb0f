package AppManager;

import java.time.LocalDate;
import java.time.LocalDateTime;

import java.util.Scanner;

import AccountOwner.Account;
import AccountOwner.AccountOwner;
import AccountOwner.AccountProperties;
import AccountOwner.Credentials;
import AccountOwner.Payee;
import BankManager.BankManager;
import Menus.WelcomeMenu;
import Person.PhoneNumber;

/**
 * In this class the banking application start, here will show the actions to do.
 * @author Faraj
 */
public class AppManager 
{		
	private static Scanner scanner = new Scanner(System.in);
	
	//Fileds
	public static AccountOwner[] usersArray  = {};
	public static  AccountOwner currentUser;
	public static BankManager bankManager;
	private static int numOfUsers;
	private static final int MAX_USERS = 1000;
	
	//Constructor
	public AppManager()
	{
		usersArray = new AccountOwner[MAX_USERS];
		numOfUsers = 0; //Default users number is zero.
		setBankManager();
		setUsersInArray();
	}
	
	/**
	 * Create the Default bank manager account.
	 */
	private void setBankManager()
	{
		Credentials managerUserAndPassward = new Credentials("TheManager", "faraj123");
		PhoneNumber managerPhoneNumber = new PhoneNumber("054","2459909");
		LocalDate managerBirthdate = LocalDate.of(1993, 6, 28);
		bankManager = new BankManager("Faraj", "Khanjar", managerPhoneNumber, managerBirthdate, managerUserAndPassward);
		usersArray[numOfUsers++] = bankManager;
	}
	
	/**
	 * Create four different Default bank accounts.
	 */
	private void setUsersInArray()
	{
		Credentials ownerUserAndPassward_1 = new Credentials("Wafi123", "wafi321");
		PhoneNumber ownerPhoneNumber_1 = new PhoneNumber("050","9969129");
		LocalDate ownerBirthdate_1 = LocalDate.of(1997, 8, 29);
		double ownerMonthlyIncome_1 = 1800 ;
		AccountOwner owner_1 = new AccountOwner("Wafi", "Khanjar", ownerPhoneNumber_1, ownerBirthdate_1, ownerUserAndPassward_1, ownerMonthlyIncome_1);
		double ownerBalance_1 = 30000;
		double ownerInterestRate_1 = 5;
		double ownerOperationFee_1 = 7;
		owner_1.setAccount(new Account(ownerBalance_1, AccountProperties.BRONZE, ownerInterestRate_1, ownerOperationFee_1, bankManager));
		addUserToArray(owner_1);		
		
		Credentials ownerUserAndPassward_2 = new Credentials("Nasreen267", "nm12345");
		PhoneNumber ownerPhoneNumber_2 = new PhoneNumber("050","2914848");
		LocalDate ownerBirthdate_2 = LocalDate.of(1999, 7, 26);
		double ownerMonthlyIncome_2 = 10000 ;
		AccountOwner owner_2 = new AccountOwner("Nasreen", "Madi", ownerPhoneNumber_2, ownerBirthdate_2, ownerUserAndPassward_2, ownerMonthlyIncome_2);
		double ownerBalance_2 = 25000;
		double ownerInterestRate_2 = 4;
		double ownerOperationFee_2 = 4.5;
		owner_2.setAccount(new Account(ownerBalance_2, AccountProperties.SILVER, ownerInterestRate_2, ownerOperationFee_2, bankManager));
		addUserToArray(owner_2);
		
		Credentials ownerUserAndPassward_3 = new Credentials("Doron7", "dr777");
		PhoneNumber ownerPhoneNumber_3 = new PhoneNumber("054","7462916");
		LocalDate ownerBirthdate_3 = LocalDate.of(1991, 7, 16);
		double ownerMonthlyIncome_3 = 18000 ;
		AccountOwner owner_3 = new AccountOwner("Doron", "Rainer", ownerPhoneNumber_3, ownerBirthdate_3, ownerUserAndPassward_3, ownerMonthlyIncome_3);
		double ownerBalance_3 = 150000;
		double ownerInterestRate_3 = 2;
		double ownerOperationFee_3 = 2.5;
		owner_3.setAccount(new Account(ownerBalance_3, AccountProperties.GOLD, ownerInterestRate_3, ownerOperationFee_3, bankManager));
		addUserToArray(owner_3);
		
		Credentials ownerUserAndPassward_4 = new Credentials("Anwar1812", "an1812");
		PhoneNumber ownerPhoneNumber_4 = new PhoneNumber("050","9969125");
		LocalDate ownerBirthdate_4 = LocalDate.of(1961, 12, 18);
		double ownerMonthlyIncome_4 = 35000 ;
		AccountOwner owner_4 = new AccountOwner("Anwar", "Khanjar", ownerPhoneNumber_4, ownerBirthdate_4, ownerUserAndPassward_4, ownerMonthlyIncome_4);
		double ownerBalance_4 = 300000;
		double ownerInterestRate_4 = 2;
		double ownerOperationFee_4 = 2.5;
		owner_4.setAccount(new Account(ownerBalance_4, AccountProperties.TITANIUM, ownerInterestRate_4, ownerOperationFee_4, bankManager));
		addUserToArray(owner_4);			
	}
	
	/**
	 * In this method, the system add a new account owner to the users array.
	 * @param ownerNewAccount is the new account that the system want to add to the array.
	 */
	private static void addUserToArray(AccountOwner ownerNewAccount)
	{
		usersArray[numOfUsers++] = ownerNewAccount;
	}
	
	/**
	 * After create the default values (the manager account and 4 different accounts), 
	 * In this method the application start and show the first bank menu.
	 */
	public void start()
	{
		WelcomeMenu.welcomeMessage();		
	}
	
	/**
	 * checks if the account owner has been approved by tha bank manager
	 * @param owner the account owner
	 * @return false if the account is null, true otherwise
	 */
	public static boolean isUserApproved(AccountOwner owner)
	{
		if (owner.getAccount() == null)
		{
			System.out.println("The bank manager didnt approved your opening account request.");
			return false;
		}
		return true;
	}
	
	
	/**
	 *  login with username and password
	 *	if password is wrong, gives 3 more tries
	 *	after 3 more wrong tries, the account is blocked for 30 minutes
	 *	returns the logging account owner
	 * @param username the account owner username
	 * @param password the account owner password
	 * @return the logged in account owner 
	 */
	public static AccountOwner login(String username, String password)
	{		
		AccountOwner loggingOwner = getUserByUsername(username);
		
		if (loggingOwner == null)
		{
			System.out.println("No account owner with the given username.");
			return null;
		}
		if (!isUserApproved(loggingOwner))
			return null;
		Credentials ownerCredentials = loggingOwner.getCredentials();
		LocalDateTime currentRelease = loggingOwner.getAccount().getReleaseTime();
		if (currentRelease != null)
		{
			if (!checkRelease(currentRelease))
			{
				System.out.println("For your safety, the system blocked you account.\nYou can try againe at: " +currentRelease);
				return null;
			}
			loggingOwner.getAccount().setLockReleaseTime(null);
		}
		
		if (checkPassword(password, ownerCredentials.getPassword()))
		{
			System.out.println("Successfully logged in.");
			return loggingOwner;
		}
		if (giveUser3TriesForPassword(loggingOwner))
		{
			System.out.println("Successfully logged in.");
			return loggingOwner;
		}
		blockAccount(loggingOwner);
		return null;
	}
	
	/**
	 * check if release time has passed, false otherwise
	 * @param release the account release time 
	 * @return true if release time has passed, false otherwise
	 */
	public static boolean checkRelease(LocalDateTime release)
	{
		if (release.isAfter(LocalDateTime.now()))
			return false;
		return true;			
	}
	
	/**
	 * block account of user
	 * @param user the account owner to block their account
	 */
	public static void blockAccount(AccountOwner user)
	{
		LocalDateTime now = LocalDateTime.now();
		LocalDateTime releaseTime = now.plusMinutes(30);
		user.getAccount().setLockReleaseTime(releaseTime);
		System.out.println("Your account has been blocked, come back at "+releaseTime);
	}
	

	/**
	 * gives user 3 tries to enter correct password
	 * @param user the account owner that is trying to log in 
	 * @return true if user succeeds, false otherwise
	 */
	public static boolean giveUser3TriesForPassword(AccountOwner user)
	{
		Credentials userCredentials = user.getCredentials();
		int tries = 3;
		while (tries > 0)
		{
			System.out.printf("Wrong password! you have %d more tries\n", tries);
			System.out.println("Enter password");
			String currentTry = scanner.next();
			if (checkPassword(currentTry, userCredentials.getPassword()))
				return true;
			else
				tries--;
		}
		return false;
	}
	
	/**
	 * check equality of given password to the actual password
	 * @param givenPassword the password that the users enter
	 * @param actualPassword the user's actual password
	 * @return true if passwords are equal, false otherwise
	 */
	public static boolean checkPassword(String givenPassword, String actualPassword)
	{
		return givenPassword.equals(actualPassword);
	}
	

	/**
	 * login with phone number
	 * @param phoneNumber given phone number
	 * @return the logging account owner, null if doesnt exist in the system
	 */
	public AccountOwner login(PhoneNumber phoneNumber)
	{
		AccountOwner owner = getOwnerByPhoneNumber(phoneNumber);
		if (owner == null)
		{
			System.out.println("No user with the given phone number.");
			return null;
		}
		if (!isUserApproved(owner))
			return null;
		LocalDateTime currentRelease = owner.getAccount().getReleaseTime();
		if (currentRelease != null)
		{
			if (!checkRelease(currentRelease))
			{
				System.out.println("Your account has been blocked. please come back at "
					+currentRelease);
				return null;
			}
			owner.getAccount().setLockReleaseTime(null);
		}
		System.out.println("Successfully logged in.");
		return owner;
	}
	
	
	/**
	 *  get account owner by phone number
	 * @param phoneNumber the given phone number
	 * @return the account owner with the given phone number, 
	 * null if there is no user with this number
	 */
	public static AccountOwner getOwnerByPhoneNumber(PhoneNumber phoneNumber)
	{
		for (int i=0; i<numOfUsers; i++)
		{
			if (usersArray[i].getPhoneNumber().equals(phoneNumber))
				return usersArray[i];
		}
		return null;
	}
	
	/**
	 * logout of the system
	 * set current user to null
	 */
	public void logout()
	{
		System.out.println("Successfully logged out.");
		currentUser = null;
	}
	
	
	/** 
	 * get user by username
	 * @param username
	 * @return the account owner with the given username,
	 * null if no user with the given username
	 */
	public static AccountOwner getUserByUsername(String username)
	{
		for (int i=0; i<numOfUsers; i++)
		{
			if (usersArray[i].getCredentials().getUserName().equals(username))
				return usersArray[i];
		}
		return null;
	}
	
	/**
	 * get phone number from user by area code and number
	 * @return the given phone number
	 */
	public static PhoneNumber getPhoneFromInput()
	{
		System.out.println("Enter phone number area code");
		String areaCode = scanner.next();
		System.out.println("Enter phone number");
		String phoneNum = scanner.next();
		PhoneNumber newPhone = new PhoneNumber(areaCode, phoneNum);
		return newPhone;
	}
	
	/**
	 * get date from user by year, month and day of month
	 * @return the given date
	 */
	public static LocalDate getUserBirthDateRegistration()
	{
		System.out.println("Enter day of birth in month (1-31)");
		int day = scanner.nextInt();
		System.out.println("Enter month of birth (1-12)");
		int month = scanner.nextInt();
		System.out.println("Enter year of birth");
		int year = scanner.nextInt();

		scanner.nextLine();
		LocalDate date = LocalDate.of(year, month, day);
		return date;
	}
	
	/** 
	 * get name from user (first name and last name)
	 * @param kind the requested name (first/last)
	 * @return the given name
	 */
	public static String getFirstNameRegistration()
	{
		System.out.println("Enter your first name please: ");
		String input = scanner.next();
		return input;
	}
	
	/** 
	 * get name from user (first name and last name)
	 * @param kind the requested name (first/last)
	 * @return the given name
	 */
	public static String getLastNameRegistration()
	{
		System.out.println("Enter your last name please: ");
		String input = scanner.next();
		return input;
	}
	
	/**
	 * In this method, the user asked to enter his username,
	 * Its used in case of Entering to the applecation OR creating a new account.
	 * @return the current username that entered.
	 */
	
	public static String getUsernameRegistration()
	{
		System.out.println("Enter username: letters and digits only");
		String username = scanner.next();
		return username;
	}
	
	/**
	 * get password from user (for login and creating account)
	 * @return the given password
	 */
	public static String getPasswordRegistration()
	{
		System.out.println("Please enter password: 4-8 characters, must contain a digit and a letter");
		String password = scanner.next();
		return password;
	}
	
	/**
	 * get monthly income from the user
	 * @return the monthly income
	 */
	public static double getMonthlyIncomeRegistration()
	{
		System.out.println("Please enter your monthly income");
		double income = scanner.nextDouble();
		return income;
	}
	
	/**
	 * open a new account
	 * add new user to users array
	 * add new user to the manager's users to approve array
	 */
	public static void openAccount()
	{
		PhoneNumber newPhone = getPhoneFromInput();
		if (getOwnerByPhoneNumber(newPhone) != null)
		{
			System.out.println("There is already an account with this phone number. please login or register with a different number");
			return;
		}
		scanner.nextLine();

		String name = getNameFromUser("first");
		String lastName = getNameFromUser("last");
		System.out.println("Enter birthday");
		LocalDate birthDate = getUserBirthDateRegistration();
		String username = getUsernameRegistration();
		if (getUserByUsername(username) != null)
		{
			System.out.println("You are able to login. we have this username already in our system.");
			return;
		}
		while (!Credentials.cheackUserNameIfOkay(username))
			username = getUsernameRegistration();
		String password = getPasswordRegistration();
		while (!Credentials.cheackPasswordIfOkay(password))
			password = getPasswordRegistration();
		Credentials newCred = new Credentials(username, password);
		double income = getMonthlyIncomeRegistration();
		AccountOwner newOwner = new AccountOwner(name, lastName, newPhone, birthDate, newCred,income);
		addUserToArray(newOwner);
		newOwner.sendToManagerApproval();
		System.out.println("Registration is completed. We ask you to wait for the approval of the bank manager.");
		System.out.println("Back to the main menu.");
	}
	
	/**
	 * get number of monthly payments from user
	 * @return the number of months
	 */
	public static int getNumberOfMonthsLoanRequest()
	{
		System.out.println("Enter number of monthly payments");
		int months = scanner.nextInt();
		return months;
	}
	
	/**
	 * get amount of money from the user
	 * @param purpose a string that describes the purpose of the money 
	 * @return the given amount of money
	 */
	public static double getMoneyAmountFromUser(String purpose)
	{
		System.out.println("Enter amount to "+purpose);
		double amount = scanner.nextDouble();
		return amount;
	}
		
	
	public static int getNumberOfUsers() 
	{
		return numOfUsers;
	}
	
	/**
	 * prints to the screen all users in the system
	 */
	public static void printAllUsers()
	{
		for (int i=0; i< numOfUsers; i++)
			System.out.println(usersArray[i]);
	}	
}